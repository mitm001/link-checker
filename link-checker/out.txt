jme3/external/blender.html:444:<p>For the managing of assets in general, be sure to read the <a href="#../../tutorials:intermediate/multi-media_asset_pipeline.adoc" class="page unresolved">Asset Pipeline Documentation</a>. It contains vital information on how to manage your asset files.</p>
jme3/external/html:779:<p>There are many 3D model <a href="#../../jme3/features.html#supported-external-file-types#" class="page unresolved">Supported External File Types</a> for jMonkeyEngine. Some of them bake your actions automatically on export, others don&#8217;t. Baking is a destructive process so it is recommended that you test the animation in-game first. If your animations are all messed up, try baking them or use a different exporter.</p>
jme3/advanced/update_loop.html:437:<p>Extending your application from com.jme3.app.<a href="#tutorials:intermediate/simpleapplication.adoc" class="page unresolved">SimpleApplication</a> provides you with an update loop. This is where you implement your game logic (game mechanics).</p>
jme3/advanced/update_loop.html:507:<p>In a trivial <a href="#tutorials:intermediate/simpleapplication.adoc" class="page unresolved">SimpleApplication</a> (such as a <a href="#tutorials:beginner.adoc" class="page unresolved">Hello World tutorial</a>), all code is either in the <code>simpleInitApp()</code> (initialization) or <code>simpleUpdate()</code> (behaviour) method â€“ or in a helper method/class that is called from one of these two. This trivial approach will make your main class very long, hard to read, and hard to maintain. You don&#8217;t need to load the whole scene at once, and you don&#8217;t need to run all conditionals tests all the time.</p>
